{"version":3,"sources":["serviceWorker.js","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/create.js","tweets/list.js","tweets/components.js","index.js"],"names":["Boolean","window","location","hostname","match","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","href","TweetCreate","didTweet","textAreaRef","React","createRef","handleBackendUpdate","alert","onSubmit","newVal","current","value","ref","required","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","createElement","tweetsEl","getElementById","ReactDOM","render","setNewTweets","canTweet","tempNewTweets","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.640babcb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n          const cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\n\r\nexport function backendLookup(method, endpoint, callback, data){\r\n  let jsonData;\r\n  if(data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n  if(csrftoken){\r\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n  \r\n  xhr.onload = function() {\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    console.log(e)\r\n    callback({\"message\": \"The request was an error\"}, 400)\r\n  }\r\n  xhr.send(jsonData)\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {apiTweetAction} from './lookup'\r\n\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action, didPerformAction} = props\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handleActionBackendEvent = (response, status) => {\r\n        console.log(response, status)\r\n        if ((status === 200 || status === 201) && didPerformAction){\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n        \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }","import {backendLookup} from '../lookup'\r\n\r\nexport function apiTweetCreate(newTweet, callback){\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content:newTweet})\r\n  }\r\n\r\nexport function apiTweetAction(tweetId, action, callback){\r\n    const data = {id:tweetId, action: action}\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}\r\n\r\nexport function apiTweetDetail(tweetId, callback) {\r\n  backendLookup(\"GET\", `/tweets/${tweetId}`, callback)\r\n}\r\n  \r\nexport function apiTweetList(username, callback) {\r\n  let endpoint = \"/tweets/\"\r\n  if(username){\r\n    endpoint = `/tweets/?username=${username}`\r\n  }\r\n  backendLookup(\"GET\", endpoint, callback)\r\n}","import React, {useState} from 'react'\r\nimport {ActionBtn} from './buttons'\r\n\r\n\r\nexport function ParentTweet(props){\r\n    const {tweet} = props\r\n    return tweet.parent ? <div className='row'>\r\n            <div className='col-11 mx-auto p-3 border rounded'>\r\n                <p className='mb-0 text-muted small'>Retweet</p>\r\n                <Tweet hideActions className={' '} tweet={tweet.parent} />\r\n            </div>\r\n        </div> : null\r\n}\r\n  \r\nexport function Tweet(props){\r\n    const {tweet, didRetweet, hideActions} = props\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    const path = window.location.pathname\r\n    const match = path.match(/(?<tweetid>\\d+)/)\r\n    const urlTweetId = match ? match.groups.tweetid : -1\r\n\r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${tweet.id}`\r\n    }\r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200){\r\n            setActionTweet(newActionTweet)\r\n        } else if (status === 201){\r\n            if (didRetweet){\r\n                didRetweet(newActionTweet)\r\n            }\r\n        }\r\n    }\r\n    \r\n    return <div className={className}>\r\n        <div>\r\n            <p>\r\n                {tweet.id} - {tweet.content}\r\n            </p>\r\n            <div>\r\n                <ParentTweet tweet={tweet}/>\r\n            </div>\r\n        </div>\r\n      \r\n        <div className='btn btn-group'>\r\n        { (hideActions !== true && actionTweet) && <React.Fragment>\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/> \r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/> \r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display:\"Retweet\"}}/> \r\n            </React.Fragment>\r\n        }  \r\n                {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n            </div>\r\n    </div>\r\n  }","import React from 'react'\r\nimport {apiTweetCreate} from './lookup'\r\n\r\n\r\nexport function TweetCreate(props){\r\n    const {didTweet} = props\r\n    const textAreaRef = React.createRef()\r\n\r\n    const handleBackendUpdate = (response, status) =>{\r\n        if (status === 201){\r\n            didTweet(response)\r\n        } else {\r\n            console.log(response)\r\n            alert(\"An error occured! Please try again\")\r\n        }\r\n      }\r\n\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      // backend api request\r\n      apiTweetCreate(newVal, handleBackendUpdate)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n        <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n            </textarea>\r\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n        </form>\r\n    </div>\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Tweet} from './detail'\r\nimport {apiTweetList} from './lookup'\r\n\r\n\r\nexport function TweetsList(props){\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length){\r\n            setTweets(final)\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        if (tweetsDidSet === false){\r\n            const handleTweetListLookup = (response, status) => {\r\n                if (status === 200){\r\n                    setTweetsInit(response)\r\n                    setTweetsDidSet(true)\r\n                } else {\r\n                    alert(\"There was an error!\")\r\n                }\r\n            }\r\n            apiTweetList(props.username, handleTweetListLookup)\r\n        }\r\n        \r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit = [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n\r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n    return tweets.map((item, index)=>{\r\n        return <Tweet \r\n        tweet={item} \r\n        didRetweet={handleDidRetweet}\r\n        className='my-5 py-5 border bg-white text-dark' \r\n        key={`${index}-{item.id}`} />\r\n    })\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {TweetsList} from './list'\r\nimport {apiTweetDetail} from './lookup'\r\nimport {TweetCreate} from './create'\r\nimport {Tweet} from './detail'\r\n\r\n\r\nexport function TweetsComponent(props) {\r\n    const {username} = props\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n\r\n    const handleNewTweet = (newTweet) =>{\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift(newTweet)\r\n        setNewTweets(tempNewTweets)\r\n      }\r\n\r\n    return <div className={props.className}>\r\n            {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n        <TweetsList newTweets={newTweets} username={username} />\r\n    </div>\r\n}\r\n  \r\n\r\nexport function TweetDetailComponent(props){\r\n    const {tweetId} = props\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [tweet, setTweet] = useState(null)\r\n\r\n    const handleBackendLookup = (response, status) => {\r\n        if (status === 200){\r\n            setTweet(response)\r\n        } else {\r\n            alert(\"There was an error finding your tweet.\")\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        if(didLookup === false){\r\n            apiTweetDetail(tweetId, handleBackendLookup)\r\n            setDidLookup(true)\r\n        }\r\n\r\n    }, [tweetId, didLookup, setDidLookup])\r\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {TweetsComponent, TweetDetailComponent} from './tweets'\n\n// const rootEl = document.getElementById(\"root\")\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   rootEl\n// );\n\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"twitterclone\")\nif (tweetsEl){\n  ReactDOM.render(\n    e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".twitterclone-detail\")\n\ntweetDetailElements.forEach(container=>{\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container);\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}